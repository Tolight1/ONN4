import torch.nn as nn
import numpy as np
import torch
import torch.nn.functional as F
from tqdm import tqdm
import torch
from torch.utils.data import DataLoader
import torch.nn.functional as F
import torchvision
import os
from torchvision import transforms
import pickle
import itertools
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
def pulse_function(x_2, y_2, z=200e-6, wavelength=940e-9):
    # Convert nm to m for calculations
    x_2 = x_2 * 1e-9
    y_2 = y_2 * 1e-9
    x_1 = torch.arange(0, 500e-9*80, 500e-9)
    y_1 = torch.arange(0, 500e-9*80, 500e-9)
    i = 1j
    f = torch.zeros((len(x_1), len(y_1)), dtype=torch.cfloat)
    for idx_x, val_x in enumerate(x_1):
        for idx_y, val_y in enumerate(y_1):
            r = torch.sqrt(((x_2 - val_x)**2 + (y_2 - val_y)**2 + z**2)*10e+6)*10e-6
            k = 2 * np.pi / wavelength
            temp = (1/(2 * np.pi)) * ((i*k*r)/r) * (z/r) * ((1/r) - i * (2 * np.pi / wavelength))
            f[idx_x,idx_y] = temp
    return f

def phase_function(phi1,phi2,theta):
    J11, J12, J21, J22 = (torch.zeros((80, 80), dtype=torch.cfloat), torch.zeros((80, 80), dtype=torch.cfloat),
                          torch.zeros((80, 80), dtype=torch.cfloat), torch.zeros((80, 80), dtype=torch.cfloat))
    J11_1 = torch.cos(theta[0]) ** 2 * torch.exp(1j * phi1[0]) + torch.sin(
        theta[0]) ** 2 * torch.exp(1j * phi1[1])
    J12_1 = torch.sin(theta[0]) * torch.cos(theta[0]) * (
                torch.exp(1j * phi1[1]) - torch.exp(1j * phi1[0]))
    J21_1= torch.sin(theta[0]) * torch.cos(theta[0]) * (
                torch.exp(1j * phi1[0]) - torch.exp(1j * phi1[1]))
    J22_1 = torch.cos(theta[0]) ** 2 * torch.exp(1j * phi1[1]) + torch.sin(
        theta[0]) ** 2 * torch.exp(1j * phi1[0])
    J11_2 = torch.cos(theta[1]) ** 2 * torch.exp(1j * phi2[0]) + torch.sin(
        theta[1]) ** 2 * torch.exp(1j * phi2[1])
    J12_2 = torch.sin(theta[1]) * torch.cos(theta[1]) * (
            torch.exp(1j * phi2[1]) - torch.exp(1j * phi2[0]))
    J21_2 = torch.sin(theta[1]) * torch.cos(theta[1]) * (
            torch.exp(1j * phi2[1]) - torch.exp(1j * phi2[0]))
    J22_2 = torch.cos(theta[1]) ** 2 * torch.exp(1j * phi2[1]) + torch.sin(
        theta[1]) ** 2 * torch.exp(1j * phi2[0])
    for i in range(80):
        for j in range(80):
                pulse=pulse_function(i,j)
                J11[i, j] = J11_2[i,j]*torch.sum((J11_1*pulse*500e-9*500e-9))+J12_2[i,j]*torch.sum(
                    (J21_1*pulse*500e-9*500e-9))
                J12[i, j] = J11_2[i, j] * torch.sum((J12_1 * pulse * 500e-9 * 500e-9)) + J12_2[i, j] * torch.sum(
                    (J21_1 * pulse* 500e-9 * 500e-9))
                J21[i, j] = J21_2[i, j] * torch.sum((J11_1 * pulse * 500e-9 * 500e-9)) + J22_2[i, j] * torch.sum(
                    (J22_1 * pulse * 500e-9 * 500e-9))
                J22[i, j] = J21_2[i, j] * torch.sum((J12_1 * pulse * 500e-9 * 500e-9)) + J22_2[i, j] * torch.sum(
                    (J22_1 * pulse * 500e-9 * 500e-9))
    return torch.cat((torch.angle(J11).unsqueeze(0), torch.angle(J12).unsqueeze(0), 
                      torch.angle(J21).unsqueeze(0),torch.angle(J22).unsqueeze(0)))

phi1,phi2,theta=torch.rand((2,80,80))*2*torch.pi,torch.rand((2,80,80))*2*torch.pi,torch.rand((2,80,80))*2*torch.pi
phase=phase_function(phi1,phi2,theta)
print(phase.shape)  #(4,80,80)
